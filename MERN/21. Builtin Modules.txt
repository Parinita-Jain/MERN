BUILTIN MODULES:
Node.js itself provides some module files, which can be used at the developer end to do specific tasks
path,event,fs,http

Absolute path: Path from Root Directory till current directory
Relative path: current file path (./path/index.js)

PATH MODULE:
const path = require('node:path');//Builtin Module
//console.log(path);
console.log(__dirname);//Absolute path of the current file upto current folder name
console.log(__filename);//Absolute path of the current file upto current file name
console.log(path.basename(__dirname));//gives the current folder name
console.log(path.extname(__filename));//extension of the current file
var parse = path.parse(__filename);//shpws root,dir,base,ext,name details of the current file
console.log(path.format(parse));//joins the parsed info and generates an absolute path
console.log(path.isAbsolute(__dirname));//finds whether path mentioned is absolute - true/else false

------------------

EVENT MODULE:
const EventEmitter = require('node:events');
//console.log(EventEmitter);
//create an object for EventEmitter class and use that object to call properties/functions
const emitterObj = new EventEmitter();
emitterObj.on("Order a Pizza",(size,type)=>{
    console.log("Welcome! order recieved!", size,"-",type);
    if(size=="large")
    console.log("Completentary Drink for Large, Enjoy!");
});
setTimeout(()=>{
    emitterObj.emit("Order a Pizza","large","margherita"); //user trigger from UI
},2500)

--------------

CHARACTER SETS AND ENCODING:

Each and every character in the keyboard has its binary equalent

4->100
a----------> ascii/Unicode
$

'z'.charCodeAt();---> Decimal Equalent of the character
------------

STREAMS:

Anything that flows -- data has to flow from one place to another to encourage mobility

Downloading and Uploading are parts of streaming

cloud to device/local--- Netflix, Youtube, uTorrent download movies from cloud to our lap
device/local to cloud --- camera ---> Google drive (Upstreaming)
mail to mail --- send and recieve mails
app to app --- messages, Whatsapp

When streaming was direct - Loss of data, restarting from scratch, double use of time

Youtube ----

red bar --- being streamed live
grey bar -- whatever data is been loaded at the backgroud (36 minute video --- 4 min loaded -- 2 min consumed)
Advantage of grey bar?
One who is watching the video - no need to wait for the balance video loading 
watching time ===== loading time (Waiting time is reduced, loading symbol is minimal)

BUFFERING --- 
for a 30 min video ---> same 30 min for viewing ==== same 30 for loading ====30 streamin = 0 wait time
too high speed internet
traffic, network load, speed of internet

console.log('4'.charCodeAt());
//Ascii/Unicode chart depicts the inputs of UTF-8 standards

const buffer = new Buffer.from("A beautiful Day!", "utf-8");

console.log(buffer);//buffers can store data in hexa decimal format only
console.log(buffer.toJSON());//converts buffer to json obj where data will be in an array of decimal values
console.log(buffer.toString());//hexa to string
----
READ FILE:

const fs = require('node:fs');
//console.log(fs);
//read file in 2 ways - sync - readFileSync,async - readFile,promises - fs.promises.readFile
fs.promises.readFile('./abc.txt').then((data)=>{
console.log(data.toString());
}).catch((err)=>{
console.log(err);
})
//why sync - code is not dependant on file reading, there is no next steps involved
const data = fs.readFileSync('./abc.txt',{encoding:"utf-8"});
console.log(data," Sync");

//async - fileRead

fs.readFile('./abc.txt',(err,data)=>{
if(err){
    console.log(err);
}else{
    console.log(data.toString()," async");
}
})
--------------
ACTIVITY:

Create Event Emitters and read file syncronously and asyncronously after 3 and 4 sec respenctiviely

const EventEmitter = require('node:events');
const fs = require("node:fs")
const emitterObj = new EventEmitter();
emitterObj.on("FileActivity",(msg)=>{
    if(msg == "Read File Async"){
        fs.readFile('./fileA.txt',(err,data)=>{
            if(err){
                console.log(err);
            }else{
                console.log(data.toString()," async");
            }
            })
    }else{
        const data = fs.readFileSync('./fileB.txt',{encoding:"utf-8"});
        console.log(data," Sync");
    }
});
setTimeout(()=>{
    emitterObj.emit("FileActivity","Read File Async"); 
    setTimeout(()=>{
        emitterObj.emit("FileActivity","Read File Sync")
    },4000)
},3000)
---
or alternative

const EventEmitter = require('node:events');
const fs = require("node:fs")
const emitterObj = new EventEmitter();
emitterObj.on("Read File Async",(msg)=>{
    
        fs.readFile('./fileA.txt',(err,data)=>{
            if(err){
                console.log(err);
            }else{
                console.log(data.toString()," async");
            }
            })
    
});
emitterObj.on("Read File Sync",()=>{
    
    const data = fs.readFileSync('./fileB.txt',{encoding:"utf-8"});
    console.log(data," Sync");

})
setTimeout(()=>{
    emitterObj.emit("Read File Async"); 
    setTimeout(()=>{
        emitterObj.emit("Read File Sync")
    },4000)
},3000)


fs - used to perform file handling
Write and Append data to the file

//File Write Sync:
const fs = require('node:fs');
fs.writeFileSync('./hello.txt',"Bubye All!!"); 
//If hello.txt is not available in the reqd path, A new file will be created and contents will be written
//If we write something to the file, contents wil be overwritten.

fs.writeFileSync('./hello.txt','New Infor Added',{flag:'a'});

//Write to File Asynchronously
fs.writeFile('./welcome.txt',"Asynch Javascript is best!",{flag:'a'},(err)=>{
    if(err)
console.log("Something went wrong!")
});
---------------------

Transfer Data from One File to another File ---> file 1 content(100kb) will be added to the buffer (10kb)---> started t transfer- once buffer is full - towfile will recieve data
 twoFile.txt--> started to flow 10+10+10----> data flow+data load+data transfer --> happen at same time simultaneusly

TYPES OF STREAMS:
1. Readable Stream - obj can read data
2. Writeable Stream - obj can write data
3. Duplex Stream - obj can read and write
4. Transform Stream - obj read->change->write

1.create readstream and read data from file
2. create write stream - create the file
3. on listener- to write while reading is happening
4. on listener--> cb will perform the write

const fs = require('node:fs');
const readStream = fs.createReadStream('./oneFile.txt',{encoding:'utf-8',highWaterMark:25});
const writeStream = fs.createWriteStream('./twoFile.txt');

readStream.on("data",(chunk)=>{
console.log(chunk);//buffer that stores piece of info -defaultly out of 270kb. max size of buffer is 64kb
//as 64kb of data, data gets transfered. If we want data to be transfered as 25kb of chunk - we need to reduce the size of buffer
writeStream.write(chunk);
writeStream.write("***********************************************************");
})

------------------------------------------------

HTTP MODULE: very very important module ---> Express JS

CREATE SERVERS AND MANIPULATE - CREATE REST API, COMMUNICATE WITH BROWSERS, PAVES A WAT TO CREATE BRIDGE BETWEEN FE & BE

CLIENT (REQ) ----- SERVER (RESP)

REQ - has info related to client activity like get,post,update,delete
RES- client raised req will be served with series of response (success, busy, not found)
server can respond only as SERVER CODE ---- "status" - 100 to 600
101, 200,301, 201,404,500

Hypertext Transfer Protocol - Protocol that defines format of client and server to speak to each other

HTTP in Node - create servers using nodejs. nodejs has access to OS sys func like networking
Node has event loop to run async tasks

nodejs is perfect for creatng web server, can handle wide variety req done from client side simultaneously.

Server is the one who will answerer after the question is asked.

2. broser --> lh:3000 --- REQ
3. server ---> will get the req from browser--> url matching --> gives whatever response it has to the browser ("Welcome to the First PAge!!")
1. nodejs running at the background -- run file using node filename

res--> plain text, html, html file, json

const http = require('node:http');
const fs = require("node:fs");
const htmlData = fs.readFileSync('./index.html',{encoding:'utf-8'})

//create server - async task - 1 cb function where req,res obj gets created
const appServer = http.createServer((req,res)=>{
//generate response
// res.writeHead(200,{"content-type":"text/plain"});//extra messsage tag added to response page
// res.end("Hello, Welcome to The First Page!"); //will create a server response page and deliver it to the browser

// res.writeHead(200,{"content-type":"text/html"})
// res.end("<h1> Welcome to First Page </h1>")

// res.writeHead(200, {"content-type":"application/json"});
// var jsonData = {id:1, name:"Naga"};
// res.end(JSON.stringify(jsonData));

res.writeHead(200,{"content-type":"text/html"});
res.end(htmlData);
})

//listen to the browser -- if we hit lh:3000 at browser- immediately the listen function can send req to the server
//is just used to denote that node is up and running, server started, go to browser and do req
appServer.listen(3000,()=>{
    console.log("NODE IS UP & RUNNING, Go to browser and start req")
})

-----

ROUTING: 
"req.url" --> needed to track the route in url

const http = require('node:http');
const fs = require("node:fs");
const htmlData = fs.readFileSync('./error.html',{encoding:'utf-8'})

const appServer = http.createServer((req, res)=>{
    
    if(req.url == '/home' || req.url == '/'){
        res.writeHead(200,{"content-type":"text/plain", "authentication-token":"12345"});
        res.end("Hello, Welcome to The First Page!");
    }else if(req.url == '/about'){
        res.writeHead(200,{"content-type":"text/html"})
        res.end("<h1> Welcome to About Page </h1>")
    }else if(req.url == '/contact'){
        res.writeHead(200, {"content-type":"application/json"});
        var jsonData = {id:1, name:"Naga"};
        res.end(JSON.stringify(jsonData));
    }else{
        res.writeHead(404,{"content-type":"text/html"});
        res.end(htmlData);
    }
    
})

appServer.listen(3000,()=>{
    console.log("Started App")
})
---------------------


