WE CAN write javascript in html's head, html's body or a seperate js file
Js as a front end language
-> a js file cant run as a standalone file without html page's help.
browser contain js engines thats capable of running the js file.
who is the compiler for a js file - BROWSER

console.log("Hello") ---> Print statement of javascript

welcome.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./welcome.js"></script>
    <script>
        console.log("JS written inside HTML head")
    </script>
</head>
<body>
    <h1> Introduction to Javascript</h1>
    <script>
        console.log("JS written inside HTML body")
    </script>
</body>
</html>

welcome.js
console.log("JS written inside JS file")

Js can be wirtten internal to html file or externally and connect them with script tag

Datatypes in JS:
A format in which data can be represented

1. Primitive - Number, String, Boolean
2. Trivial - null, undefined
3. Composite - Object, Array

Js is a Loosely typed, Dynamically typed language

Variables - The storage containers with a name that can hold a data
Syntax: 
----------------> keyword          identifier            =   literal;
---------------->var/let/const   variableName = data;

Comments:
Single line comment //
Multi line comment  /*  */
vsc shortcut to comment a part is ctrl+/

Keywords to create variable:
var, const, let

create a variable using var keyword if you want to use the variablename from line 1 to last line of the js file - GLOBAL SCOPE - if we want the data to be known to everyone
create a variable using let keyword if you want to use the variable from the line in which it is created to the last line of the js file - LOCAL SCOPE - inside brackets we will create, TEMPORARY DATA
create a variable using const keyword if you dont want to change the value (final data) - LOCAL SCOPE

Keyword - any language will have set of words maintained in its dictionary. according to that compiler will work and find errors
Eg: var,let,const,if,else,for,switch,while,do-while,try,catch,this,super
  
Literal - Piece of Information - data - number, string, letter, boolean, special characters
Eg: 1,100,Naga,true,&$,Hi5

Identifiers - Names that developer gives to variables, classes, functions  
Eg: name, age, School, doTask()

Rules to follow while creating an Identifier:
->create a single word identifier, dont leave spaces in between
Eg- is married X--> ismarried
->dont start the identifier with numbers or symbols except _$
Eg- 5gender, &gender X ---> _gender or $gender or gender
->If you want to create a 2 word identifier, include symbol in between or use camelCase
Eg- school nameX --> schoolRoomName or school_room_name
->it has to be a meaningful name
->avoid using %#@&* --> used to read address, define hexadecimal value, for percentages, pointers

welcome.js
console.log("JS written inside JS file")
console.log(a);//undefined - because a is known but value is created later
//console.log(b);//Cannot access 'b' before initialization
//console.log(c);//Cannot access 'c' before initialization

var a = 5; //var a can be used from line 1 to line 14
let b = 2; //let b can be used from line 7 to line 14
const c = 3; //const c can be used from line 8 to line 14 - but 3 cant be changed

// c=6;TypeError: Assignment to constant variable.

var rollNum = 123; 
var studentName = "Naga";
var student_age = 13.5;
var isMarried = false;
var $exam = null; //variable has occupied memory space but has no value
var _gender; //variable is created but value is not supplied
var remarks = 'She is a good student';
var Grade = "A";
//to find the datatype
console.log(typeof rollNum, typeof studentName, typeof student_age, typeof isMarried, typeof $exam, typeof _gender, typeof Grade, typeof remarks);
console.log( rollNum,  studentName,  student_age,  isMarried,  $exam, _gender, Grade, remarks);

//Operations done in console.log
console.log(100+56);
console.log(89/4);
console.log(56>89);
console.log("Naga" + 67 + "gorgeous");
console.log("hello"+5+7+"hi");//log starts with a number-> add
console.log(9+13+"hi");
console.log(9-13+"hi");
var data1 = 8;
var data2 = 7;
console.log(data1+data2);

OPERATORS:
1. Arithmetic Operator + - / * % ++ --
2. Logical Operator && || !
3. Assignment Operator = += -= /= *= %=
4. Conditional/Ternery Operator ?:
5. String Operator /Concatenation Operator +
6. typeof operator typeof
7. Comparision Operator ===
8. Relational Operator >= <= != == < > 

ARITHMETIC OPERATOR:
//+-/*%++--
console.log(1+2-3*4/5);
console.log(2%2);//left num div by right num ->rem=0
console.log(14%3);//12 is div by 3 -> rem=2
console.log(78%100);//less num in left side -> rem=left num
console.log(0%40);//0
console.log(40%0);//NaN-Not a Num - Infinity
var name = "Naga";
console.log(name/2);//NaN
var marks = "98";
console.log(marks/2);

Module Operator %

if left num is less than right num -> left num is the answer
if left num is 0 ---> 0 is the answer
if right number is 0 --> NaN = infinity
if both left and right are same numbers --> 0 as the answer




