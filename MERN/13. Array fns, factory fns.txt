Array Functions:
sort - order values in asc/desc
reduce - sum,mul total from an array - one data as the o/p
find - search a value from list of data in an array based on a condition - one data as the o/p
filter - search many values from list of data in an array based on a condition - array as an o/p
map - traverse the entire array and manipulates the array - gives array as an o/p
Factory Functions
Classes&Objects
Inheritance

SORT FUNCTION:

var num = [67,92,17,32,99,40]; //bubble sort

num.sort((a,b)=>{
    if(a<b) return -1;
    if(a>b) return 1;
    return 0;
});

num.sort((a,b)=>{
    return a-b;//ascending
})

num.sort((a,b)=>{
    return b-a;//descending
})

console.log(num);

MAP FUNCTION:

var num = [67,92,17,32,99,40]; 
//Map-traverse the entire array, visit each element in the array
var num2;
//multiply all the data in the array by 10
num2 = num.map((n)=>{
    return n*10;
})

console.log(num2);

FIND FUNCTION:

var num = [67,92,17,32,99,40]; 
//FIND - BASED ON ANY CONDITION - RETURNS ONLY ONE ELEMENT THAT SUITS THE CONDITION
var num2;
num2 = num.find((n)=>{
    if(n%2==0)
    return n;
})

console.log(num2);//92

var num = [67,92,17,32,99,40]; 
//FILTER - BASED ON ANY CONDITION - RETURNS ARRAY OF ELEMENTS THAT SUITS THE CONDITION BY FINDING TILL THE END
var num2;
num2 = num.filter((n)=>{
    if(n%2==0)
    return n;
})

console.log(num2);//[ 92, 32, 40 ]

var num = [1,2,3,4,5,6]; 

//REDUCE - accumulate the element data by doing some operation and returns one data as a result
var num2;
num2 = num.reduce((acc,curr)=>{
    return acc+curr;
},0)
//0+1=1->acc
//1+2=3->acc
//3+3=6->acc
//6+4=10->acc
//10+5=15->acc
//15+6=21->acc
console.log(num2);

ACTIVITY:

let num=[48,51,12,24,98,65,12];

1. Sort the values to ascending -SORT
2. Sort the values to descending -SORT
3. Search for number 12 in the array -FIND
4. Find how many times number 12 is present in the array -FILTER
5. Based on the order of elements, mark the numbers divisible by 12 or not divisible by 12 -MAP
6. Print the sum of even numbers in the array -REDUCE


let num=[48,51,12,24,98,65,12];

// 1. Sort the values to ascending -SORT
num.sort((a,b)=>{
    return a-b;
})
console.log(num);
// 2. Sort the values to descending -SORT
num.sort((a,b)=>{
    return b-a;
})
console.log(num);
// 3. Search for number 12 in the array -FIND
var findData=num.find((n)=>{
    return n==12;
})
console.log(findData);
// 4. Find how many times number 12 is present in the array -FILTER
var filterData=num.filter((n)=>{
    return n==12;
})
console.log(filterData.length);
// 5. Based on the order of elements, mark the numbers divisible by 12 or not divisible by 12 -MAP
var markData = num.map((n)=>{
    if(n%12==0)
    return "Div by 12";
    else
    return "Not div by 12";
})
console.log(markData);
// 6. Print the sum of even numbers in the array -REDUCE
var even = num.filter((n)=>{
if(n%2==0)
return n;
})
var sum = even.reduce((acc,curr)=>{
    return curr+acc;
})
console.log(sum);


FACTORY FUNCTIONS:

Function that produces objects is known as factory functions

function abc(){
    return {id:1, name:"Naga"};
}
var returnedObj = abc();
console.log(returnedObj);

------

var person1= {
    name:"Akash",
    age:25,
    greet:function(){
        console.log("Hello from "+this.name)
    }
};
var person2= {
    name:"Dev",
    age:26,
    greet:function(){
        console.log("Hello from "+this.name)
    }
};
//this used to refer current object
//each and everytime we cant write an object name explicitly
console.log(person1.name, person2.name);
person1.greet();
person2.greet();
------

WE WILL CREATE AN OBJECT GENERATOR WHICH GENERATES OBJECTS FOR US- WE WILL SUPPLY THE DATA WHILE WE CALL THE GENERATOR FUNCTION

function createPersons(name,age){
    return {
        name:name,
        age:age,
        greet:function(){
            console.log("Hello from "+this.name);
        }
    };
}

var person1 = createPersons("Akash",25);
var person2 = createPersons("Dev",21);
var person3 = createPersons("Gopal",23);
var person4 = createPersons("Jeya",27);

console.log(person1,person2,person3,person4);
console.log(person1.name);
person1.greet();
console.log(person2.name);
person2.greet();
-----------------------------------------------

function createPersons(name,age){
    return {
        name,
        age,
//ES6 - SHORTER SYNTAX PROPERTT: If key and value are having same name, no need to write it twice
        greet:function(){
            console.log("Hello from "+this.name);
        }
    };
}

var person1 = createPersons("Akash",25);
var person2 = createPersons("Dev",21);
var person3 = createPersons("Gopal",23);
var person4 = createPersons("Jeya",27);

console.log(person1,person2,person3,person4);
console.log(person1.name);
person1.greet();
console.log(person2.name);
person2.greet();
-------

Add, Update and Remove the properties, functions

function createPersons(name,age){
    return {
        name,
        age,
//ES6 - SHORTER SYNTAX PROPERTT: If key and value are having same name, no need to write it twice
        greet:function(){
            console.log("Hello from "+this.name);
        }
    };
}

var person1 = createPersons("Akash",25);
var person2 = createPersons("Dev",21);
var person3 = createPersons("Gopal",23);
var person4 = createPersons("Jeya",27);

console.log(person1,person2,person3,person4);
console.log(person1.name);//1 way to fetch obj prop- static way
console.log(person1["name"]);//2 way to fetch obj prop - dynamic way
person1.greet();
console.log(person2.name);
person2.greet();

console.log(person1);
//extra properties - isMarried:false, drive()
person1.isMarried=false;
person1.drive=function(){
    console.log(this.name+" has started to drive");
}
console.log(person1);

//update or remove data from existing properties
person1.age=0;
person1.isMarried ='';
console.log(person1);
delete person1.age;  // or delete person1["age"];
-----------------------------------------------

Activity: 
generate 4 users object using factory functions with name,email properties, login and logout functions

function createUsers(username,useremail){
    return {
    username,
    useremail,
    login:function(){
        console.log(this.username+" has successfully logged in");
    },
    logout:function(){
        console.log(this.username+" has successfully logged out");
    }
};
}

var user1=createUsers("Naga","naga@gmail.com");
var user2=createUsers("Muthu","muthu@gmail.com");
var user3=createUsers("Lakshmi","lakshmi@gmail.com");
var user4=createUsers("Suji","suji@gmail.com");

console.log(user1,user2,user3,user4)