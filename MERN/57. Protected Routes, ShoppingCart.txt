----

We can set route guard to reach a specific route

/lh:3000/login---> name, email--> submit--->lh:3000/dashboard
lh:3000/dashboard--> directly it will not work--> ask us to login first and then reach the route

useNavigate- used to take route params
Navigate - takes us to a particular route

Login.js
import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
const Login = ({setUser}) => {
    const navigate = useNavigate();
    const [name, setName] = useState('')
    const [email, setEmail] = useState('')
    const handleSubmit=(e)=>{
        e.preventDefault();
        if(!name || !email){
            return;
}else{
            setUser({name:name, email:email})
            navigate('/dashboard');
        }
    }
  return (
   <>
   <form onSubmit={handleSubmit}>
<label>Username</label>
        <input type="text" id="name" value={name} onChange={(e)=>{setName(e.target.value)}}/>
        <label>Email</label>
        <input type="email" id="email" value={email} onChange={(e)=>{setEmail(e.target.value)}}/>
        <button type="submit">Login</button>
   </form>
   </>
  )
}

export default Login

Dashboard.js
import React from 'react'

const Dashboard = ({user}) => {
  return (
    <>
    <h1> Welcome!!</h1>
    <h1>{user.name}</h1>
    <h1>{user.email}</h1>
    </>
  )
}

export default Dashboard

ProtectedRoute.js

import React from 'react'
import { Navigate } from 'react-router-dom'

const ProtectedRoute = ({children,user}) => {
    if(!user){
        return <Navigate to='/login'></Navigate>
    }else{
        return children;
    }
}

export default ProtectedRoute

Layout.js
<Link to='/login'>Login</Link>&nbsp;&nbsp;&nbsp;&nbsp;

App.js
const [user,setUser] = useState(null);
<Route path='/login' element={<Login setUser={setUser}/>}></Route>
        <Route path='/dashboard' element={
          <ProtectedRoute user={user}>
            <Dashboard user={user}/>
          </ProtectedRoute>
        }></Route>
      </Route>

---------------


SHOPPING CART USING PROP DRILLING:

App.js

const [cart,setCart]=useState([])
 <Route path="/allproducts"element={<AllProducts cart={cart} setCart={setCart}/>}></Route>
 <Route path='/cart' element={<Cart cart={cart} setCart={setCart}/>}></Route>

Layout.js

const Layout=({cart})=>{
     <Link to='/cart'>My Cart - {cart.length}</Link>

Cart.js
import React, { useEffect, useState } from 'react'
import OneProduct from './OneProduct'

const Cart = ({cart,setCart}) => {
    const [total,setTotal]=useState(0);
    useEffect(()=>{
        setTotal(cart.reduce((acc,curr)=>{return acc+Number(curr.price)},0))
    },[cart])
  return (
    <>
    <h1> Total Purchase : Rs. {total}</h1>
    {cart.map((p)=>{
       return <OneProduct p={p} key={p.id} cart={cart} setCart={setCart}></OneProduct>
    })}
    </>
  )
}

export default Cart

OneProduct.js
import React from 'react'

const OneProduct = ({p,cart,setCart}) => {
    console.log(cart);
  return (
    <article key={p.id}>
                    <h3>{p.name}</h3>
                    <img src={p.image} alt="not found"/>
                    <h2>Rs. {p.price}</h2>
                    {!cart.includes(p)?<button onClick={()=>{setCart([...cart,p])}}>Add to Cart</button>:<button onClick={()=>{setCart(cart.filter((c)=>c.id !== p.id))}}>Remove from Cart</button>}
    </article>
  )
}

export default OneProduct

AllProducts.js
import React, { useState } from 'react'
import products from '../data'
import OneProduct from './OneProduct'

const AllProducts = ({cart,setCart}) => {
    
  return (
    <>
    {products.map((p)=>{
        return(
           <OneProduct key={p.id} p={p} cart={cart} setCart={setCart}></OneProduct>
        )
    })}
    </>
  )
}

export default AllProducts
-----------------------------------


1. MovieFlix - Backend project (express+mongodb)
2. Blog - Full Stack (EJS + Express + MongoDB)
3. React - (Counters, Github Search, Shopping Cart, Book List)
4. Authentication - (MongoDB, Express, React, Node)
------------
Redux ---> Shopping Cart ----  have a look 
-----
REDUX - State management tool - which has a single store as a central data store

reducers, actions, dispatcher
useSelector is used to get value from the store(data thats returnded from reducer())
useDispatch is used to call the reducer fn from the dispatcher fn
npm i redux react-redux

1. Create your store using createStore(pass your reducer fn - return state)
2. export the store
3. surround the component using provider <Provider> and share the store as a prop
4. use useSelector to get the data returend from the reducer fn and use it in your component
5. created our handlers, used useDispatch with type
6. explanded, returned the changed data from the reducer function for the type and payload

App.js

import { Provider } from 'react-redux'
import store from './ReduxCounter/Store'
import ReduxCounter from './ReduxCounter/ReduxCounter'
        <Route path='/reduxcounter' element={<Provider store={store}><ReduxCounter/></Provider>} ></Route>

Layout.js
        <Link to='/reduxcounter'>ReduxCounter</Link>&nbsp;&nbsp;&nbsp;&nbsp;

Store.js
import { createStore } from "redux"

const reducerFn = (state={count:10},action) =>{
    if(action.type === 'Add'){
        return {count: state.count+1}
    }else if(action.type === 'Sub'){
        return {count: state.count-1}
    }else  if(action.type === 'Multiply'){
        return {count: state.count* action.payload}
    }else{
        return state
    }
    
}
const store = createStore(reducerFn);
export default store;

ReduxCounter.js

import React from 'react'
import { useDispatch, useSelector } from 'react-redux'

const ReduxCounter = () => {
    const count = useSelector((state)=>state.count)
    const dispatcher = useDispatch();
    var increase = ()=>{
        dispatcher({type:'Add'})
    }
    var decrease = ()=>{
        dispatcher({type:'Sub'})
    }
    var multiply = ()=>{
        dispatcher({type:"Multiply",payload:7})
    }
  return (
    <>
    <br/><br/><br/>
    <button onClick={increase}>ADD</button>
    <h1>{count}</h1>
    <button onClick={decrease}>SUB</button>
    <button onClick={multiply}>MULTIPLY</button>
    </>
  )
}

export default ReduxCounter

------

REDUX TOOL KIT - https://redux-toolkit.js.org/introduction/getting-started

configureStore(): wraps createStore to provide simplified configuration options and good defaults. It can automatically combine your slice reducers, adds whatever Redux middleware you supply, includes redux-thunk by default, and enables use of the Redux DevTools Extension.

createSlice(): accepts an object of reducer functions, a slice name, and an initial state value, and automatically generates a slice reducer with corresponding action creators and action types.

The Redux Toolkit package is intended to be the standard way to write Redux logic. It was originally created to help address three common concerns about Redux:

"Configuring a Redux store is too complicated"
"I have to add a lot of packages to get Redux to do anything useful"
"Redux requires too much boilerplate code"


npm i @reduxjs/toolkit

ToolkitStore.js
import { configureStore, createSlice } from "@reduxjs/toolkit";
const slice = createSlice({
    name:'Toolkit-Counter',
    initialState:{counter:0},
    reducers:{
        increase(state,action){
            state.counter = state.counter+1
        },
        decrease(state,action){
            state.counter = state.counter-1
        },
multiply(state,action){
            state.counter = state.counter*action.payload
        },
    }
})
export const actions = slice.actions;
export const tstore = configureStore({reducer:slice.reducer})

ToolkitCounter.js
import React from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { actions } from './ToolkitStore'
const ReduxCounter = () => {
    const count = useSelector((state)=>state.counter)
    const dispatcher = useDispatch();
    var increase = ()=>{
        dispatcher(actions.increase())
    }
var decrease = ()=>{
        dispatcher(actions.decrease())
    }
    var multiply = ()=>{
        dispatcher(actions.multiply(10))
    }
  return (
    <>
    <br/><br/><br/>
    <button onClick={increase}>ADD</button>
<h1>{count}</h1>
    <button onClick={decrease}>SUB</button>
    <button onClick={multiply}>MULTIPLY</button>
    </>
  )
}

export default ReduxCounter


App.js
import { Provider } from 'react-redux'
import ToolkitCounter from './ReduxToolkitCounter/ToolkitCounter'
import { tstore } from './ReduxToolkitCounter/ToolkitStore'
<Route path='/reduxtoolkitcounter' element={<Provider store = {tstore}><ToolkitCounter/></Provider>} ></Route>

Layout.js
<Link to='/reduxtoolkitcounter'>ReduxToolKitCounter</Link>&nbsp;&nbsp;&nbsp;&nbsp;