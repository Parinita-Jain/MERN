OBJECT DESTRUCTURING:

Eg - Cons of using old way:

var data = {id:1, name:"Naga", age:28};
console.log(data.id, data.name, data.age);

//object name and dot operator should be carefully used.Than remembering the id, name and age we need to remember the obj name
console.log(data.gender);//undefined
console.log(datas.gender);//ERROR

1. If you forget the obj name, get an error
2. cant use key name individually like a variable name
3. unnecessary use of obj name, dot operator everywhere than that of key name

DESTRUCTURING - do it for arrays and objects

The process of revealing the key names as independant variable names out of the object.
main emphasis is to avoid the use of obj name and dot operator.

Eg:

var data = {id:1, name:"Naga", age:28};
console.log(data.id, data.name, data.age);
console.log(id);//undefined - keys cant perform standalone duties

//destructure - keys has now become variable names
var {id, name, age} = data;
console.log(id, name, age);//data.id -not required
console.log(data.id, data.name, data.age);//always works!!!!!!


Point 1:
var data = {id:1, name:"Naga", age:28};
//can we destructure the keys using different name?
var {id1, name1,age1} = data;
console.log(id1,name1,age1);//undefined
//WHATEVER IS THE KEY NAME - ONLY SAME NAME SHOULD BE USED WHILE DESTRUCTURING

Point 2:
var data = {id:1, name:"Naga", age:28};
//can we destructure the keys using different name - no
//can we give alias names for the keys? - yes
var {id:sno, name:initial, age:dob} = data
console.log(sno, initial, dob);//1 Naga 28
//ONCE WE SET ALIAS NAME TO KEYS - WE CANT USE THE ORIGINAL KEY NAME AS A VARIABLE NAME
console.log(id,name,age);//Error!
console.log(data.id,data.name,data.age);//1 Naga 28

Point 3:

var data = {id:1, name:"Naga", age:28};
//can we destructure the keys using different name - no
//can we give alias names for the keys? - yes
//ONCE WE SET ALIAS NAME TO KEYS - WE CANT USE THE ORIGINAL KEY NAME AS A VARIABLE NAME
//can we destructure a key which is not present in original object? - yes

var {id,name,age,marks} = data;
console.log(id,name,age,marks); //marks-undefined
// we have new key created during destructuring - how to set initial/default value to it?
var {id,name,age,marks=100} = data;
console.log(id,name,age,marks);
//can we set default data for original keys - no
var {id=123,name="Cathy",age=99,marks=100} = data;
console.log(id,name,age,marks);//1 Naga 28 100
//EVEN IF YOU SET A DEFAULT DATA FOR ORIGINAL KEYS- DATA WILL BE IGNORED

Point 4:
var data = {id:1, name:"Naga", age:28};
var {id:sno, name, age, marks:total=100} = data;
console.log(sno, data.id, name, data.name, age, data.age, total);//can be used formats
//id, marks,data.marks - not to be used formats

Point 5:

No need to destructure every key- whichever yu wanna destructure, yu can
var data = {id:1, name:"Naga", age:28};
var {id:sno, marks:total=100} = data;

Point 6: NESTED OBJECTS:

var data = {
    id:1, 
    name:"Naga", 
    age:28, 
    address:{
        door:123,
        street:"abc",
        city:"TN"
    }};
var {address:{door,street,city}} = data;
//console.log(address);//not to be used
console.log(data.address);//{ door: 123, street: 'abc', city: 'TN' }
console.log(data.address.door);//123
console.log(door, street, city);

SPREAD OPERATOR:
...
used to keep the non destructured items in a seperate object
//whichever data yu need, yu can destructure and keep the balance or rest of the items in a seperate object
//used while destructuring ONLY
//use spread operator if yu want some details as a seperate object

var employee = {eid:1, ename:"Dev", eage:40, esalary:30000, egender:"Male", isMarried:true};
//whichever data yu need, yu can destructure and keep the balance or rest of the items in a seperate object
var {ename, esalary, ...ePersonal} = employee;
console.log(ename);
console.log(esalary);
console.log(ePersonal);//{ eid: 1, eage: 40, egender: 'Male', isMarried: true }
console.log(ePersonal.egender);//Male

NEVER USE SPREAD OPERATOR AT THE START OF DESTRUCTURING - not at start/middle

//var {ename, esalary, ...ePersonal} = employee;
var {ename,...ePersonal, esalary } = employee;//ERROR-Rest element must be last element
var {ename, esalary, ...ePersonal} = employee;//ERROR-Rest element must be last element

Activity : Predict the output- objects+spread operator

DESTRUCTURING ARRAYS:

var arr =["Naga", 34, 67.89, true];
console.log(arr[0],arr[1],arr[2],arr[3]);
//destructure the array to avoid using square brackets and index numbers
var [name, age, score, isMarried] = arr;
console.log(name,age,score,isMarried);
//Its not mandatory to give names to all the data
//we will try to destructure age and isMarried alone
//MAINTAIN THE ORDER IN WHICH YOU WANT TO ASSIGN VARIABLE NAME
var [,age,,isMarried] = arr;
console.log(age,isMarried);

//direct destructuring without array name:
var [name,age,score,isMarried]=["Naga",34, 67.89,true];
console.log(name,age,score,isMarried);

USING SPREAD OPERATOR IN ARRAYS:

var arr = [99,88,77,66,55,44,33,22,11];

//wish to keep balance data in a seperate array
//spread operator should be used at the last item of destructuring.
//we cant disturb the position of the elements
// leave 1st data and put rest of the data in spread array

var [a,b,...c] = arr;
console.log(a,b,c);
console.log(c[1]);//66

//we dont wish to give names like a, b at all, only for rest of the items I wish to keep name
var [,,,...x] = arr;
console.log(x);

//Swap 2 names

name1="Akash";
name2="Dev";
name2---->Akash, name1---->Dev
HINT: use Destructuring arrays/ Destructuring Object Concept

//OBJECT DESTRUCTURING
var name1="Akash", name2="Dev";
var names={name1:"Akash",name2:"Dev"};
var {name1,name2} = names;
console.log(name1,name2);
var {name1:name2,name2:name1} = names;
console.log(name1,name2);
//-----------------------------------------//
//ARRAY DESTRUCTURING
var n1="Akash", n2="Dev";
console.log(n1,n2);
[n1,n2] = [n2,n1];
console.log(n1,n2);


REST OPERATOR:
...

While Destructuring an array or object - if we use ... - its called as Spread
If we use ... while expressing the function arguments ---> its Rest
iF THERE Is lot of arguments passed during function call, right time to use rest operator

Items Purchased in the Super Market. The guy had 600 Rs.
Milk 25
Maggi 30
Juice 45
Fruits 150
Veggies 200
How much is the balance? (150)

WITHOUT REST OPERATOR:
function calculateBalance(total,milk,maggie,juice,fruits,veggies){
    var spentTotal = milk+maggie+juice+fruits+veggies
    var balance = total-spentTotal;
    console.log(balance);
}
calculateBalance(600,25,30,45,150,200);

USING REST:
function calculateBalance(...data){
    console.log(data);
    //how to get the total of 2nd data to last data?
}
calculateBalance(600,25,30,45,150,200);

SOLUTION:
function calculateBalance(total,...data){
    var spentTotal=0;
    for(var i=0;i<data.length;i++){
        spentTotal=spentTotal+data[i];
    }
    var balance = total-spentTotal;
    console.log(balance);
    
}
calculateBalance(600,25,30,45,150,200);//while passing data here, keep the group of data at last only then yu can easily use rest

Average of one Student
English 80
Hindi 70
Math 85
Science 60
Social 75
Total Number of subjects  5
Average = Sum of Subjects/ Number of Subjects

SOLUTION:
function Average(noOfSub,...data)
{
 
    var Total=0;
    for(var i=0;i<data.length;i++){
        Total=Total+data[i];
    }
 var avg=Total/noOfSub;
 console.log("average ="+avg);
}
Average(5,80,70,85,60,75);

FUNCTION WITH PARAMETER WITH RETURN TYPE:

function Average(noOfSub,...data)
{
 
    var Total=0;
    for(var i=0;i<data.length;i++){
        Total=Total+data[i];
    }
 var avg=Total/noOfSub;
 return avg;
}

var a=Average(5,80,70,85,60,75);
console.log("average ="+a);

Arguments/Parameters- fn call to defn
Return - fn def last line to func call