GetOneMovie/6
DeleteOneMovie?mid=7
ROUTE PARAMETERS
ROUTE QUERY PARAMETERS
 Route parameters are named url degments that are used to capture the values specified at their position in  the url.

-> If we are giving more than one param in express, we have to stricty give the values of those params in postman
POSTMAN: lh:3000/movieflix/getOneMovie/6/Dory
EXPRESS: app.get('movieflix/getOneMovie/:mid/:mname',(req,res)=>{
console.log(req.params);//{mid:'6', mname:'Dory'}
})

-> If we are giving more than one param in express having one parameter as optional, we have to stricty give the values of those params in postman
POSTMAN: lh:3000/movieflix/getOneMovie/6
EXPRESS: app.get('movieflix/getOneMovie/:mid/:mname?',(req,res)=>{
console.log(req.params);//{mid:'6', mname:'Dory'}
})

/movieflix/getOneMovie/6 -> movieflix/getOneMovie/:mid
/movieflix/getOneMovie/ -> movieflix/getOneMovie/:mid => Error
/movieflix/getOneMovie/6/Dory -> movieflix/getOneMovie/:mid/:mname?
/movieflix/getOneMovie/6 -> movieflix/getOneMovie/:mid/:mname => Error

-> use find - if the search is going to return one obj
-> use filter - if the search is going to return more than one obj - an array


PUT --> We need to send the entire movie info in req.body, in that if we are going to change any one or 2 info we can do it
PATCH--> whatever data tha you want to change in an object, only that info yu have to send it in req.body


const changedMovie = Object.assign(updateMovie, req.body);
							target,			source
{id:2, title:'A',description:'abc',ratings:5,duration:140},
{id:2, title:'A',description:'xyz',ratings:4.9,duration:140, stars:3}

{id:2, title:'A',description:'xyz',ratings:4.9,duration:140, stars:3}

From the source, if there is an extra or different data to an existing key, that will be updated to the target

index.js
const fs  = require('fs');
 var moviesData = JSON.parse(fs.readFileSync('./movies.json',{encoding:'utf-8'}));
console.log(typeof moviesData)
 //convert string to JSON - JSON.parse()
 const express = require('express');
 const appServer = express();
 //ADD MIDDLEWARE TO UPDATE THE REQ OBJECT TO GET SOME INFO FROM POSTMAN OR BROWSER
 appServer.use(express.json());
 //GET ALL MOVIES
appServer.get('/movieflix/getAllMovies',(req,res)=>{
    if(moviesData.length==0){
        res.json({
            "status":"empty",
            "message":"Sorry No Movies Available"
        })
    }else{
        res.json({
            "status":"success",
            "data":moviesData
        })
    }
   
})

//ADD NEW MOVIE
appServer.post('/movieflix/addNewMovie',(req,res)=>{
    console.log(req.body); //{ title: '3 Idiots', description: 'Comedy', duration: 130, ratings: 5 }
    //CREATE A NEW ID
    var movieLength=moviesData.length;
    var lastId = moviesData[movieLength-1].id;
    var newId = lastId + 1;
    console.log(newId); //7
    //TO MERGE ID WITH REQ.BODY
    var newMovie = Object.assign({id:newId},req.body);
    console.log(newMovie); //{id: 7,title: '3 Idiots',description: 'Comedy',duration: 130,ratings: 5}
    //PUSH NEW MOVIE TO THE MOVIESDATA ARRAY
    moviesData.push(newMovie);
    console.log(moviesData); //{id:1 to id:7}
    //LETS WRITE THIS INFO INTO THE FILE, MEANWHILE WE WILL GIVE THE RESPONSE ALSO TO THE PM- ASYNC
    fs.writeFile('./movies.json',JSON.stringify(moviesData),(err)=>{
        if(err){
            res.json({
                "status":"Failed",
                "message":"Something went wrong"
            })
        }else{
            res.json({
                "status":"success",
                "data":moviesData
            })
        }
    })
})

//DELETE ALL MOVIES
appServer.delete('/movieflix/deleteAllMovies',(req, res)=>{
moviesData = [];
fs.writeFile('./movies.json',JSON.stringify(moviesData),(err)=>{
    if(err){
        res.json({
            "status":"Failed",
            "message":"Something went wrong"
        })
    }else{
        res.json({
            "status":"success",
            "data":moviesData
        })
    }
})
})

//GET ONE MOVIE USING ID
appServer.get('/movieflix/getOneMovie/:mid',(req,res)=>{
    //get routeParam and multipying it with one is to convert string to number
    console.log(req.params.mid * 1);
    const mid = req.params.mid * 1;
    const searchMovie = moviesData.find((s)=>{
        return s.id === mid;
    })
    console.log(searchMovie);
    if(searchMovie){
    res.json({
        "status":"Success",
        "data":searchMovie
    })
    }else{   
    res.json({
        "status":"Failed",
        "message":"Sorry no movie found in this id, try again with another id"
    })
    }
})

appServer.delete('/movieflix/deleteOneMovie/:did',(req,res)=>{
    const did = req.params.did * 1;
    const deleteMovie = moviesData.find((d)=>{
        return d.id === did
    })
    if(deleteMovie){
        const index = moviesData.indexOf(deleteMovie);
        moviesData.splice(index, 1); 
       fs.writeFile('./movies.json',JSON.stringify(moviesData), (err)=>{
        if(err){
            res.json({
                "status":"Failed",
                "message":"Something went wrong while writing to the file"
            })
        }else{
            res.json({
                "status":"Success",
                "data":moviesData
            })
        }
       })
    }else{ 
        res.json({
            "status":"Failed",
            "message":"Sorry no movie found in this id, try again with another id"
        })
        }
});

appServer.put('/movieflix/putOneMovie',(req, res)=>{
    console.log(req.query.uid * 1);
    const uid = req.query.uid * 1;
    const updateMovie = moviesData.find((u)=>{
        return u.id === uid;
    })
    if(updateMovie){
        var changedMovie = Object.assign(updateMovie, req.body);
        let index = moviesData.indexOf(updateMovie);
        moviesData[index] = changedMovie;
        fs.writeFile('./movies.json',JSON.stringify(moviesData),(err)=>{
            if(err){
                res.json({
                    "status":"failed",
                    "message":"Something went wrong"
                })
            }else{
                res.json({
                    "status":"success",
                    "data":moviesData
                })
            }
        })
       
    }else{
        res.json({
            "status":"failed",
            "message":"sorry the id is not available, try with another id"
        })
    }

    
})

appServer.patch('/movieflix/patchOneMovie',(req, res)=>{
    console.log(req.query.uid * 1);
    const uid = req.query.uid * 1;
    const updateMovie = moviesData.find((u)=>{
        return u.id === uid;
    })
    if(updateMovie){
        var changedMovie = Object.assign(updateMovie, req.body);
        let index = moviesData.indexOf(updateMovie);
        moviesData[index] = changedMovie;
        fs.writeFile('./movies.json',JSON.stringify(moviesData),(err)=>{
            if(err){
                res.json({
                    "status":"failed",
                    "message":"Something went wrong"
                })
            }else{
                res.json({
                    "status":"success",
                    "data":moviesData
                })
            }
        })
       
    }else{
        res.json({
            "status":"failed",
            "message":"sorry the id is not available, try with another id"
        })
    }

    
})
 appServer.listen(3000, ()=>{
    console.log("Vistt browser");
 })
----------------------

MIDDLEWARE:

When we want to update the request before it reaches the response/ server -> then we use middleware

appServer.use(express.json()); //this is used to get req body, req.params, req.query data from the request object

Since we are updating the req object after clicking send-> in the middle of the logic-> Middleware

MIDDLEWARE ID OF 3 TYPES
Builtin Middleware --- app.use(express.json())
Custom Middleware -- methods we may create and pass them inside use(customLogger())
Thirdparty Middleware -- methods like loggers, morgan, dotenv are already put inside npm, we can install them and use them too

