
CAN WE WRITE JS DIRECTLY IN CMD-- will nde be able to run it
Browser console-> if we write js--> it will run-because js engines can understand.
REPL - WITHOUR WRITING JS IN A FILE AND THEN RUNNING IT, we cna directly wirte js in the terminal
R READ, E EVALUATE, P PRINT, L LOOP

REPL:
Node.Js REPL or Read-Evaluate-Print Loop is an interactive shell for the Node.js environment which means we can write any valid Javascript code in it. This is used to test, evaluate, experiment, or debug code much easier and accessible way. It basically acts as the Browser’s Web dev tools’ Console for Javascript.

To use the REPL, you must have Node.js downloaded for your Operating System. To check if the Node.Js is installed correctly, you can use the following command:

node --version

PS C:\Users\nmlak\OneDrive\Desktop\Notes\MERN 12.30-2.30 WD\18.. Intro to node> node      
Welcome to Node.js v20.10.0.
Type ".help" for more information.
> console.log("Welcome to REPL");
Welcome to REPL
undefined
> function a(){console.log("Hello"); return "Done!";}
undefined
> a();
Hello
'Done!'
//READ
> var name="Naga";
undefined
//PRINT
> console.log(name);
Naga
undefined
//EVALUATE
> 4+5
9
> 5*3*5;
75
//LOOP
> for(let i=0;i<10;i++){console.log(i);}
0
1
2
3
4
5
6
7
8
9
undefined
>

RUN A FILE :

node filename.js / node filename (if the file is of .js format not .mjs format)
node filename.mjs (strictly extension will be expected - node will defaultly search for .js file only to run)

MODULES:

Any folder& file inside node or inside your project- is called modules.
Encapsulated and Reusable chunk of code that has its own context.

ProjectMainFolder
|_ _calculator	--- 	MODULE COLLECTOR
|	|_ _simpleCalc.js - add(),sub(),multiply(),divide() ---MODULE 1
|	|_ _scientificCalc.js - log(),exp(),sin(),tan(),deg() ---- MODULE 2
|
|_ _mathematics -- module is used to do some arithmentic operations

simpleCalc can be used in some other file maths - maths is dependant on simple calc-> is a module 

In Node.js, Each file is treated as a seperate modules

3 TYPES OF MODULE:
1. LOCAL MODULE - files that we create in our app
2. BUILTIN MODULE - nodejs will give us these modules (fs,http,path,event)
3. THIRD PARTY MODULE - files that are stored outside our computer (in a cloud/registry)-- we can request and download those files into our computer and then use them - NPM,YARN,PNPM

LOCAL MODULES: files that we create in our app

index.js
const add=(a,b)=>{
    return a+b
}

var c = add(55,7);
console.log(c)
---------------------------------------------
What if I wish to keep the functions alone defined and kept safe in one place, where I use another file to call and run them
index.js-add(){} ----------------LIBRARY--- we will not run-but we import these files and use the functions
math.js-add(x,y);---> node math ---> answer!

EXPORT A FILE
index.js
const add=(a,b)=>{
    return a+b
}
//from index.js - export the function- allowing add() to be used by all
module.exports=add;

IMPORT A FIE
math.js
//import index.js - so that math.js can use the add() here
var add = require('./index');
console.log(add)

var c = add(100,300);//function defined at index.js
console.log(c);
c= add(45,2.1);
console.log(c);
c=add("Hello"," world");
console.log(c);
//we haev not written the logic of add - but importing another module helped us to avoid rewriting
//enhance reusability
RUN FILE: node math

LOCAL
	2 WAYS TO SHARE DATA 
		1. Using CommonJS Standard - express and ejs
pattern1:
use module.exports to share a data, use require('file-path') to recieve a data from diff file
pattern2:
if there is more than one data to be shared, pack them as objects - with different keys. use parent.key to retrieve the value - and then manipulate the value
pattern3:
if there is more data, we share as objects, make key and value name similar, so that yu can write only once - SHORTER SYNTAX PROPERTY OF OBJECT LITERAL. use parent.key to retrieve the value - and then manipulate the value
pattern4:
while getting the obj from a file, destructure it to avoid parent name and dot operator


IIFE FUNCTIONS:
IMMEDIATELY INVOKED FUNCTION EXPRESSIONS - called automatically when we run the code


		2. Using ESModules Standard - React, Angular






