EXPRESS

Node - Library of Javascript that helps in Backend Programing and Server manipulation

Modules in Node - Builtin(fs,http,events,path), Custom(Common, ESModule), Third Party Modules(npm, pnpm, yarn)
--------
http - create Server, req,res objects , routing, listen
Web Application - FE + BE +DB - with http module - no of lines of code is more.
So To create and Manipulate servers using Node -This tiny little framework is created. Express
With Express, 
1. Server creation is easy
2. Connecting  FE--BE + BE---DB is easy
FOR A WEB APP = BE->EXPRESS 
3. FE - use view engines like EJS, PUG, 
   DB - use MySQL, MongoDB, 
   BE - JS(Node+Express)
Framework - Not like Angular, Springboot, React, Django, Flask

Express Framework is a framework of node.js
Angular, Vue,Next.js, ReactNative - Frameworks of Javascript
JQuery, Node, React - Libraries of JavaScript

SERVER CREATION AND ROUTING WITH NODE.JS

const http = require('node:http');
const fs = require("node:fs");
const htmlData = fs.readFileSync('./error.html',{encoding:'utf-8'})

const appServer = http.createServer((req, res)=>{
    
    if(req.url == '/home' || req.url == '/'){
        res.writeHead(200,{"content-type":"text/plain", "authentication-token":"12345"});
        res.end("Hello, Welcome to The First Page!");
    }else if(req.url == '/about'){
        res.writeHead(200,{"content-type":"text/html"})
        res.end("<h1> Welcome to About Page </h1>")
    }else if(req.url == '/contact'){
        res.writeHead(200, {"content-type":"application/json"});
        var jsonData = {id:1, name:"Naga"};
        res.end(JSON.stringify(jsonData));
    }else{
        res.writeHead(404,{"content-type":"text/html"});
        res.end(htmlData);
    }
    
})

appServer.listen(3000,()=>{
    console.log("Started App")
})

LETS USE EXPRESS FOR SERVER CREATION AND ROUTING:

1. create package.json
2. Install Express from npm
3. Require express alone, no need of http

There are http methods that serves some purpose in the browser:

get - browser is trying to get some existing data from the server(google search, signin)
post - browser is trying to give some new data to the server (new data - sign up)
patch/put- browser is requesting server to change data in it (some new data - Edit Experience/update profile)
delete - browser is requesting to remove a particular data from the server (delete/give data and remove)

req - this object contains all info related to the browser like form data, url information, body details, url parameter info or query parameter info
www.google.com/45?search=apple&page=3&date=9

res - this object contains all info from the server --> if we want to give info to browser - use res object
-Plain text, json,html page as a response 
res.end we will not use

res.send()
res.sendFile() - always use absolute path for giving the html page location
res.json()

--
index.js
var express = require('express');
var appServer = express();

appServer.get('/',(req,res)=>{
res.status(200).send("Welcome to HomePage!");
})
appServer.get('/about',(req,res)=>{
    res.json({id:1, name:"Naga"})
})
appServer.get('/contact',(req,res)=>{
res.sendFile('C:\\Users\\nmlak\\OneDrive\\Desktop\\Notes\\MERN 12.30-2.30 WD\\24.. Express Apps\\welcome.html');
})
appServer.listen(3000,()=>{
    console.log("Visit Browser!");
})

welcome.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1 style="color:red">Welcome</h1>
</body>
</html>

package.json
{
  "name": "24..-express-apps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.18.2"
  }
}
-----------
DIFFERENT TYPE OF WEBAPPS:
1. STATIC WEB APP
2. DYNAMIC WEBAPP - SERVER SIDE RENDERED WEBPAGE
3. WEB API POWERED WEBAPP - CLIENT SIDE RENDERED WEBPAGE


STATIC WEBPAGE:
No backend, No Server

DYNAMIC WEBPAGE: -  SERVER SIDE RENDERED WEBPAGE
Deciding the templates, which data to be filled on which page all that is decided by Server
Has DB, Has BE App (Nodejs, php,python,java)
Based on the database , content will be built based on the data coming from DB.
Web App - Login, Log out, profile rendering, DataFetching - Google search results, Flipkart Item search result
Server may take time to respond based on the data or based on the query 
SpringBoot, Django creating response pages  - may take time
If there is traffic, delay --  response time gets high

WEBAPI POWERED WEBPAGE - CLIENT SIDE RENDERED WEBPAGE
API - Application Programming Interface
client --API-- server
customer --- waiter --- chef

Server is used just to get data from DB and convert it to json format
That data is given to browser.
browser is already ready with templae-> quickly fil data and showing it to client
Client who gets the data
springboot, django, java,python, express, nodejs - backend ----> give the data as json to front end (Angular, react native frameworks )- that quickly render the page on the screen

HTML+CSS+JS ----> Portfolio --> Static app

mysql+Java+html/css
mysql+Python+html/css

mysql+springboot ----> DYNAMIC APP
mysql+Django

mongodb+nodejs/expressjs+html/ejs ---> WEB API POWERED APP
mongoDB+express+Angular/React/Reactnative/Vue
mongoDB+springboot+Angular/React/Reactnative/Vue
mongoDB+Django+Angular/React/Reactnative/Vue

-------------------------------

